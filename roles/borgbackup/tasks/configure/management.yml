---
- name: 'security | borgbackup | management | create or update backup management user'
  delegate_to: '{{ item.1.management.host }}'
  remote_user: 'ansible'
  ansible.builtin.user:
    name: '{{ item.1.management.user | mandatory }}'
    home: '{{ item.1.management.home | mandatory }}'
    createhome: true
    shell: '/usr/sbin/nologin'
    system: true
  loop: '{{ borgbackup_job | subelements("repository") }}'
  when:
  - item.1.management.user | d('root') != 'root'

- name: 'security | borgbackup | management | create ssh configuration directory'
  delegate_to: '{{ item.1.management.host }}'
  remote_user: 'ansible'
  ansible.builtin.file:
    dest: '{{ item.1.management.home | d("/root") }}/.ssh'
    owner: '{{ item.1.management.user | d("root") }}'
    group: '{{ item.1.management.group | d(item.1.management.user) | d("root") }}'
    mode: '0700'
    state: 'directory'
  loop: '{{ borgbackup_job | subelements("repository") }}'

- name: 'security | borgbackup | management | generate backup management ssh key'
  delegate_to: '{{ item.1.management.host }}'
  remote_user: 'ansible'
  community.crypto.openssh_keypair:
    path: '{{ item.1.management.home | d("/root") }}/.ssh/id_{{ borgbackup_management_ssh_key_type }}'
    owner: '{{ item.1.management.user | d("root") }}'
    group: '{{ item.1.management.group | d(item.1.management.user) | d("root") }}'
    mode: '0600'
    type: '{{ borgbackup_ssh_key_type }}'
  loop: '{{ borgbackup_job | subelements("repository") }}'

- name: 'security | borgbackup | management | ensure remote repository host public key'
  delegate_to: '{{ item.1.management.host }}'
  remote_user: 'ansible'
  ansible.builtin.known_hosts:
    host: '{{ item.1.host | mandatory }}'
    key: '{{ item.1.host | mandatory }} {{ item.1.host_pub_key | mandatory }}'
    hash_host: true
  loop: '{{ borgbackup_job | subelements("repository") }}'

- name: 'security | borgbackup | management | create directory TODO'
  delegate_to: '{{ item.1.management.host }}'
  remote_user: 'ansible'
  ansible.builtin.file:
    dest: '{{ borgbackup_management_d }}'
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: 'directory'
  loop: '{{ borgbackup_job | selectattr("state", "havlasme.security.is_present") | list | subelements("repository") }}'

- name: 'security | borgbackup | management | create directory TODO'
  delegate_to: '{{ item.1.management.host }}'
  remote_user: 'ansible'
  ansible.builtin.file:
    dest: '{{ borgbackup_management_d + "/" + inventory_hostname }}'
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: 'directory'
  loop: '{{ borgbackup_job | selectattr("state", "havlasme.security.is_present") | list | subelements("repository") }}'

- name: 'security | borgbackup | management | create or update management.d configuration'
  delegate_to: '{{ borgbackup_management_job.1.management.host }}'
  remote_user: 'ansible'
  ansible.builtin.template:
    dest: '{{ borgbackup_management_d + "/" + inventory_hostname + "/" + (borgbackup_management_job.0.name | mandatory) + ".yaml" }}'
    src: '{{ borgbackup_management_job.0.template | d(borgbackup_management_template) }}'
    owner: 'root'
    group: 'root'
    mode: '0600'
  loop: '{{ borgbackup_job | selectattr("state", "havlasme.security.is_present") | list | subelements("repository") }}'
  loop_control:
    loop_var: borgbackup_management_job
  vars:
    item: '{{ borgbackup_management_job.0 }}'

- name: 'security | borgbackup | management | download public ssh key'
  delegate_to: '{{ item.1.management.host }}'
  remote_user: 'ansible'
  ansible.builtin.slurp:
    src: '{{ item.1.management.home | d("/root") }}/.ssh/id_{{ borgbackup_management_ssh_key_type }}.pub'
  loop: '{{ borgbackup_job | subelements("repository") }}'
  register: borgbackup_management_pub_key

- name: 'security | borgbackup | management | configure ssh key at remote repository'
  delegate_to: '{{ item.1.host }}'
  ansible.posix.authorized_key:
    user: '{{ item.1.user }}'
    key: '{{ borgbackup_management_pub_key.results[borgbackup_management_pub_key_index].content | b64decode }}'
    key_options: 'restrict,command="borg serve --restrict-to-path={{ item.1.home | d("/var/lib/borgbackup/" + item.1.user) }}/{{ item.0.name }}"'
  loop: '{{ borgbackup_job | subelements("repository") }}'
  loop_control:
    index_var: borgbackup_management_pub_key_index
...
