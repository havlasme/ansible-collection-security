---
- name: 'security | borgbackup | configure | create borgbackup client group'
  ansible.builtin.group:
    name: '{{ borgbackup_group }}'
    system: true
  when:
  - borgbackup_group != 'root'

- name: 'security | borgbackup | configure | create borgbackup client user'
  ansible.builtin.user:
    name: '{{ borgbackup_user }}'
    home: '{{ borgbackup_home }}'
    createhome: true
    group: '{{ borgbackup_group }}'
    shell: '/usr/sbin/nologin'
    system: true
  when:
  - borgbackup_user != 'root'

- name: 'security | borgbackup | configure | create borgbackup client ssh configuration directory'
  ansible.builtin.file:
    dest: '{{ borgbackup_home }}/.ssh'
    owner: '{{ borgbackup_user }}'
    group: '{{ borgbackup_group }}'
    mode: '0700'
    state: 'directory'

- name: 'security | borgbackup | configure | generate borgbackup client ssh key'
  community.crypto.openssh_keypair:
    path: '{{ borgbackup_home }}/.ssh/id_{{ borgbackup_ssh_key_type }}'
    owner: '{{ borgbackup_user }}'
    group: '{{ borgbackup_group }}'
    mode: '0600'
    type: '{{ borgbackup_ssh_key_type }}'

- name: 'security | borgbackup | configure | add repository host key to known host list'
  ansible.builtin.known_hosts:
    host: '{{ item.1.host | mandatory }}'
    key: '{{ item.1.host_pub_key | mandatory }}'
    hash_host: true
  loop: '{{ borgbackup_job | subelements("repository") 
    | selectattr("0.state", "havlasme.ansible.is_present") | list
    | selectattr("1.state", "havlasme.ansible.is_present") | list }}'
  loop_control:
    label: '{{ item.1.host | mandatory }}'

- name: 'security | borgbackup | configure | delete borgbackup job configuration'
  ansible.builtin.file:
    dest: '{{ borgbackup_job_d }}/{{ item.name | mandatory }}.yaml'
    state: 'absent'
  loop: '{{ borgbackup_job | selectattr("state", "havlasme.ansible.is_absent") | list }}'
  loop_control:
    label: '{{ item.name | mandatory }}.yaml'

- name: 'security | borgbackup | configure | create or update borgbackup job configuration'
  ansible.builtin.template:
    dest: '{{ borgbackup_job_d }}/{{ item.name | mandatory }}.yaml'
    src: '{{ item.template | d(borgbackup_job_template) }}'
    owner: '{{ borgbackup_user }}'
    group: '{{ borgbackup_group }}'
    mode: '0600'
  loop: '{{ borgbackup_job | selectattr("state", "havlasme.ansible.is_present") | list }}'
  loop_control:
    label: '{{ item.name | mandatory }}.yaml'

- name: 'security | borgbackup | configure | download borgbackup client public ssh key'
  ansible.builtin.slurp:
    src: '{{ borgbackup_home }}/.ssh/id_{{ borgbackup_ssh_key_type }}.pub'
  register: borgbackup_client_pub_key

- name: 'security | borgbackup | configure | configure borgbackup client ssh key at repository'
  delegate_to: '{{ item.1.host | mandatory }}'
  ansible.posix.authorized_key:
    user: '{{ item.1.user | mandatory }}'
    key: '{{ borgbackup_client_pub_key.content | b64decode }}'
    key_options: 'restrict,command="borg serve {% if item.1.append_only | d(false) | bool %}--append-only {% endif %}--restrict-to-path={{ item.1.home | d("/var/lib/borgbackup/" + item.1.user | mandatory) }}/{{ item.0.name | mandatory }}"'
    state: '{{ item.1.state | d(item.0.state) | d("present") }}'
  loop: '{{ borgbackup_job | subelements("repository") }}'
  loop_control:
    label: '{{ item.1.user | mandatory }} | {{ item.0.name | mandatory }} | {{ item.1.state | d(item.0.state) | d("present") }}'

- name: 'security | borgbackup | configure | initialize borgbackup repository'
  ansible.builtin.command: >
    borgmatic init
    --config '{{ borgbackup_job_d }}/{{ item.name | mandatory }}.yaml'
    --encryption={{ item.encryption | d("repokey") | quote }}
  loop: '{{ borgbackup_job | selectattr("state", "havlasme.ansible.is_present") | list }}'
  loop_control:
    label: '{{ item.name | mandatory }}'
  register: borgbackup_init
  changed_when: borgbackup_init.rc == 0 and borgbackup_init.stderr | length > 0
...
