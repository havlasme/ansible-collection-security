---
- name: 'Configure | Create the BorgBackup Directory Structure'
  ansible.builtin.file:
    dest: '{{ item }}'
    owner: '{{ borgbackup__user }}'
    group: '{{ borgbackup__group }}'
    mode: '0700'
    state: 'directory'
  loop:
  - '/etc/borgbackup'
  - '{{ borgbackup__home }}/.ssh'
  when:
  - borgbackup__state != 'absent'

- name: 'security | borgbackup | configure | generate borgbackup client ssh key'
  community.crypto.openssh_keypair:
    path: '{{ borgbackup_home }}/.ssh/id_{{ borgbackup_ssh_key_type }}'
    owner: '{{ borgbackup_user }}'
    group: '{{ borgbackup_group }}'
    mode: '0600'
    type: '{{ borgbackup_ssh_key_type }}'

- name: 'Configure | Add the BorgBackup Repository Host Key to the Known Hosts'
  ansible.builtin.known_hosts:
    host: '{{ item.1.host | mandatory }}'
    key: '{{ item.1.host_pub_key | mandatory }}'
    hash_host: true
  loop: '{{ borgbackup__job | subelements("repository") 
    | selectattr("0.state", "havlasme.ansible.is_present") | list
    | selectattr("1.state", "havlasme.ansible.is_present") | list }}'
  loop_control:
    label: '{{ item.1.host | mandatory }}'

- name: 'Configure | Delete a BorgBackup Job Conf'
  ansible.builtin.file:
    dest: '/etc/borgbackup/{{ item.name | mandatory }}.yaml'
    state: 'absent'
  loop: '{{ borgbackup__job | selectattr("state", "havlasme.ansible.is_absent") | list }}'
  loop_control:
    label: '{{ item.name | mandatory }}'
  when:
  - borgbackup__state != 'absent'

- name: 'Configure | Create the BorgBackup Directory Structure'
  ansible.builtin.file:
    dest: '{{ item.dest | mandatory }}'
    owner: '{{ item.user | d("root") }}'
    group: '{{ item.group | d(borgbackup__group) }}'
    mode: '{{ item.mode | d("0750") }}'
    state: 'directory'
  loop: '{{ borgbackup__job | selectattr("state", "havlasme.ansible.is_directory") | list }}'
  loop_control:
    label: '{{ item.name | mandatory }}'
  when:
  - borgbackup__state != 'absent'

- name: 'Configure | Create and Update a BorgBackup Job Conf'
  ansible.builtin.template:
    dest: '/etc/borgbackup/{{ item.name | mandatory }}.yaml'
    src: '{{ lookup("havlasme.ansible.template", item.template | d(borgbackup__job_template)) }}'
    owner: '{{ item.user | d("root") }}'
    group: '{{ item.group | d(borgbackup__group) }}'
    mode: '0640'
  loop: '{{ borgbackup__job | selectattr("state", "havlasme.ansible.is_present") | list }}'
  loop_control:
    label: '{{ item.name | mandatory }}.yaml'
  when:
  - borgbackup__state != 'absent'

- name: 'Configure | Obtain the BorgBackup Client Public Key'
  ansible.builtin.slurp:
    src: '{{ borgbackup__home }}/.ssh/id_{{ borgbackup__ssh_key_type }}.pub'
  register: borgbackup__client_pub_key

- name: 'Configure | Configure the BorgBackup Client Key at the Repository'
  delegate_to: '{{ item.1.host | mandatory }}'
  ansible.posix.authorized_key:
    user: '{{ item.1.user | mandatory }}'
    key: '{{ borgbackup_client_pub_key.content | b64decode }}'
    key_options: 'restrict,command="borg serve {% if item.1.append_only | d(false) | bool %}--append-only {% endif %}--restrict-to-path={{ item.1.home | d("/var/lib/borgbackup/" + item.1.user | mandatory) }}/{{ item.0.name | mandatory }}"'
    state: '{{ item.1.state | d(item.0.state) | d("present") }}'
  loop: '{{ borgbackup_job | subelements("repository") }}'
  loop_control:
    label: '{{ item.1.user | mandatory }} | {{ item.0.name | mandatory }} | {{ item.1.state | d(item.0.state) | d("present") }}'

- name: 'security | borgbackup | configure | initialize borgbackup repository'
  ansible.builtin.command: >
    borgmatic init
    --config '{{ borgbackup_job_d }}/{{ item.name | mandatory }}.yaml'
    --encryption={{ item.encryption | d("repokey") | quote }}
  loop: '{{ borgbackup_job | selectattr("state", "havlasme.ansible.is_present") | list }}'
  loop_control:
    label: '{{ item.name | mandatory }}'
  register: borgbackup_init
  changed_when: borgbackup_init.rc == 0 and borgbackup_init.stderr | length > 0
...
